@startuml

class Apm {
    -registry: Registry
    +rxBus: RxBus
    +init(Context context)
    +start()
}
Apm ..> Registry
Apm ..> RxBus

class Registry {
    -observers: HashMap<String, Observer>
    -plugins: HashMap<String, Plugin>
    +rxBus: RxBus
    + getObserver(observerId: String): Observer?
    + getPlugin(pluginId: String): Plugin?
    + registerObserver(observerId: String, observer: Observer): Boolean
    + registerPlugin(pluginId: String, plugin: Plugin): Boolean
    + unregisterObserver(observerId: String): Boolean
    + unregisterPlugin(pluginId: String): Boolean
    + updateObserver(observerId: String, observer: Observer): Boolean
    + updatePlugin(pluginId: String, plugin: Plugin): Boolean
}

interface Plugin {
    +pluginId: String
    +rxBus: RxBus
    +start()
    -onRegister(Context context)
    -onUnRegister()
}

interface Observer {
    -onRegister(Context context)
    -onUnRegister()
    +onMessage(Message message)
}

Observer --> Message

'Observer --> RxBus

abstract class Message {
    +metadata: T
}

class RxBus {
    +register(object: Object)
    +post(object: Object)
}

Plugin <-down-o Registry

Observer <-down-o Registry


class CpuPlugin {
    +start()
    -onRegister(Context context)
    -onUnRegister()
}
class MemoryPlugin {
     +start()
   -onRegister(Context context)
    -onUnRegister()
}
class FpsPlugin {
    +start()
    -onRegister(Context context)
    -onUnRegister()
}
CpuPlugin -up-|> Plugin

MemoryPlugin -up-|> Plugin

FpsPlugin -up-|> Plugin


class TrackerObserver {
    -onRegister(Context context)
    -onUnRegister()
    +onMessage(Message message)
}

TrackerObserver -up-|> Observer
@enduml